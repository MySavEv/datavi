import streamlit as st
import matplotlib as plt
import pandas as pd
import seaborn as sns
import os
import numpy as np
import warnings
import plotly.express as px
import plotly.graph_objects as go

from wordcloud import WordCloud
# import center as ct

warnings.filterwarnings('ignore')

st.set_page_config(page_title="DashBoard!!!", page_icon=":bar_chart:",layout="wide")

st.title(" :bar_chart: Education ")
st.markdown('<style>div.block-container{padding-top:1rem;}</style>',unsafe_allow_html=True)

df = pd.read_csv("https://raw.githubusercontent.com/MySavEv/datavi/master/datasetEducation.csv")
new_columns = {
    "คุณยินยอมให้ใช้ข้อมูลส่วนตัวและข้อมูลด้านการศึกษาของคุณ เพื่อใช้ในการศึกษาและนำไปพัฒนา":"ความยินยอม",
    "สาขา ( กรอกด้วยชื่อเต็มของสาขา ,หากไม่มีกรอก ' - ')":"สาขา",
    "ชั้นปีที่":"ชั้นปี",
    "คุณเคยได้รับผลการเรียนที่ไม่พึงพอใจหรือไม่":"เคยได้รับผลการเรียนที่ไม่พึงพอใจ"
}

df.rename(columns=new_columns,inplace=True)
cols = list(df.columns)
kery = [10,45]
maikery = [45,79]

df_kery = df[df[df.columns[9]] == "เคย"];
df_kery.drop(columns=df.columns[maikery[0]:maikery[1]],inplace=True); # Drop คำถามส่วน ไม่เคยออก

df_maikery = df[df[df.columns[9]] == "ไม่เคย"];
df_maikery.drop(columns=df.columns[kery[0]:kery[1]],inplace=True); # Drop คำถามส่วน เคยออก

#sidebar
st.sidebar.header('Filter')
field = st.sidebar.multiselect('คณะ',df["คณะ"].dropna().unique())
if not field :
    df2 = df.copy()
else:
    df2 = df[df["คณะ"].isin(field)]

have = st.sidebar.selectbox('เคยได้เกรดไม่พึงพอใจ',df["เคยได้รับผลการเรียนที่ไม่พึงพอใจ"].dropna().unique())
if not have :
    df3 = df2.copy()
else:
    df3 = df2[df2["เคยได้รับผลการเรียนที่ไม่พึงพอใจ"] == have]

if not field and not have :
    filtered_df = df
elif not field :
    filtered_df = df3
elif not have :
    filtered_df = df2
elif field and have :
    filtered_df = df3[df3["คณะ"].isin(field)]


keay_maikery = df2['เคยได้รับผลการเรียนที่ไม่พึงพอใจ'].value_counts().reset_index(name='จำนวน')
fig = px.pie(keay_maikery, values = 'จำนวน', names = "เคยได้รับผลการเรียนที่ไม่พึงพอใจ",hole=0.9)
fig.update_layout(showlegend=False,width=300, height=300)
fig.update_traces(text=keay_maikery['เคยได้รับผลการเรียนที่ไม่พึงพอใจ'])
st.sidebar.plotly_chart(fig,use_container_width=True)


st.subheader('คณะ')
filtered_df1 = filtered_df.groupby(["คณะ","ผลการเรียนในรายวิชาที่พึงพอใจ"]).size().reset_index(name="จำนวน")
fig = px.pie(filtered_df1, values = 'จำนวน', names = "คณะ",hole=0.3)
fig.update_traces(text = filtered_df1["คณะ"], textposition = "outside")
st.plotly_chart(fig,use_container_width=True)

if field:
    # # สร้างคอลลัม
    # columns = st.columns(len(field))

    # # แสดงข้อมูลในแต่ละคอลลัม
    # for i, column in enumerate(columns):
    #     column.write(f"อันที่ {i+1}: {field[i]}")
    #     with column:
    #         st.plotly_chart(fig,use_container_width=True)
    
    for i,fiel in enumerate(field):
        st.subheader(str(fiel),str(fiel))
        scale = {'น้อยที่สุด': 1, 'น้อย': 2, 'ปลานกลาง': 3, 'มาก': 4, 'มากที่สุด': 5}

        if have == 'เคย':
            satisfication = filtered_df[filtered_df['คณะ'] == fiel][['ด้านที่ 1 ปัจจัยด้านการศึกษา [1. นักศึกษาไม่มีความกระตือรือร้นในการเรียน]',
                                    'ด้านที่ 1 ปัจจัยด้านการศึกษา [2. นักศึกษาส่งการบ้านไม่ครบและไม่ตรงตามกำหนดเวลา]',
                                    'ด้านที่ 1 ปัจจัยด้านการศึกษา [3. นักศึกษามีคะแนนสอบที่ไม่น่าพอใจ]',
                                    'ด้านที่ 1 ปัจจัยด้านการศึกษา [4. นักศึกษาไม่ได้เข้าเรียนเป็นประจำ]',
                                    'ด้านที่ 1 ปัจจัยด้านการศึกษา [5. นักศึกษาไม่ทบทวนบทเรียนสม่ำเสมอ]',
                                    'ด้านที่ 1 ปัจจัยด้านการศึกษา [6. นักศึกษาทำกิจกรรมของมหาวิทยาลัยเป็นประจำ]',
                                    'ด้านที่ 1 ปัจจัยด้านการศึกษา [7. นักศึกษามีส่วนร่วมในชั้นเรียนน้อย]',
                                    'ด้านที่ 1 ปัจจัยด้านการศึกษา [8. ครอบครัวมีผลต่อผลการเรียนของนักศึกษา]' ]].replace(regex=scale)
            labels = ['นักศึกษาไม่มีความกระตือรือร้นในการเรียน',
                    'นักศึกษาส่งการบ้านไม่ครบและไม่ตรงตามกำหนดเวลา',
                    'นักศึกษามีคะแนนสอบที่ไม่น่าพอใจ',
                    'นักศึกษาไม่ได้เข้าเรียนเป็นประจำ',
                    'นักศึกษาไม่ทบทวนบทเรียนสม่ำเสมอ',
                    'นักศึกษาทำกิจกรรมของมหาวิทยาลัยเป็นประจำ',
                    'นักศึกษามีการมีส่วนร่วมในชั้นเรียนน้อย',
                    'ครอบครัวมีผลต่อผลการเรียนของนักศึกษา']
        
        else:
            satisfication = filtered_df[filtered_df['คณะ'] == fiel][['ด้านที่ 1 ปัจจัยด้านการศึกษา [1. นักศึกษามีความกระตือรือร้นในการเรียน]',
                         'ด้านที่ 1 ปัจจัยด้านการศึกษา [2. นักศึกษาส่งการบ้านครบและตรงตามกำหนดเวลา]',
                         'ด้านที่ 1 ปัจจัยด้านการศึกษา [3. นักศึกษามีคะแนนสอบที่น่าพอใจ]',
                         'ด้านที่ 1 ปัจจัยด้านการศึกษา [4. นักศึกษาเข้าเรียนเป็นประจำ]',
                         'ด้านที่ 1 ปัจจัยด้านการศึกษา [5. นักศึกษาทบทวนบทเรียนสม่ำเสมอ]',
                         'ด้านที่ 1 ปัจจัยด้านการศึกษา [6. นักศึกษาทำกิจกรรมของมหาวิทยาลัยเป็นประจำ].1',
                         'ด้านที่ 1 ปัจจัยด้านการศึกษา [7. นักศึกษามีส่วนร่วมในชั้นเรียนเป็นประจำ]',
                         'ด้านที่ 1 ปัจจัยด้านการศึกษา [8. ครอบครัวมีผลต่อผลการเรียนของนักศึกษา].1' ]].replace(regex=scale)

            labels = ['นักศึกษามีความกระตือรือร้นในการเรียน',
                    'นักศึกษาส่งการบ้านครบและตรงตามกำหนดเวลา',
                    'นักศึกษามีคะแนนสอบที่น่าพอใจ',
                    'นักศึกษาเข้าเรียนเป็นประจำ',
                    'นักศึกษาทบทวนบทเรียนสม่ำเสมอ',
                    'นักศึกษาทำกิจกรรมของมหาวิทยาลัยเป็นประจำ',
                    'นักศึกษามีส่วนร่วมในชั้นเรียน',
                    'ครอบครัวมีผลต่อผลการเรียนของนักศึกษา']

        vals = satisfication.mean()

        fig = go.Figure(go.Bar(
            y=labels,
            x=vals,
            text=vals,
            texttemplate="%{value:.2f}",
            orientation='h',
            marker=dict(color=px.colors.qualitative.Pastel),
        ))

        fig.update_layout(
            title="ปัจจัยด้านนักศึกษา",
            xaxis_title="จำนวนนักศึกษา",
            yaxis_title="ประเด็นของปัจจัยด้านการศึกษา",
            yaxis={'categoryorder': 'total ascending'},
            xaxis_range=[1, 5],
            xaxis=dict(
                tickmode="array",
                tickvals=np.arange(len(vals)) + 1,
                ticktext=["1 น้อยที่สุด", "2 น้อย", "3 ปานกลาง", "4 มาก", "5 มากที่สุด"]
            ),
            height=500,
            width=700,
        )

        st.plotly_chart(fig,use_container_width=True)

        if have == 'เคย':
            satisfication = filtered_df[filtered_df['คณะ'] == fiel][['ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [1. อาจารย์มีการใช้สื่อการเรียนการสอนที่ไม่น่าสนใจ]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [2. อาจารย์ไม่มีความสามารถในการทําให้ผู้เรียนเข้าใจเนื้อหาได้ง่าย]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [3. บรรยากาศในห้องเรียนไม่น่าสนุกสนาน]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [4. อาจารย์ใช้เกณฑ์การตัดเกรดที่ไม่เหมาะสม]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [5. อาจารย์ให้ความสนใจนักศึกษาไม่เพียงพอ]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [6. อาจารย์ไม่รับฟังความคิดเห็นของนักศึกษา]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [7. อาจารย์ไม่มีความตั้งใจในการสอน]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [8. อาจารย์ผู้สอนมีการประเมินคะแนนที่ไม่ยุติธรรม]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [9. อาจารย์ผู้สอนมีประสบการณ์และความรู้ไม่เพียงพอในวิชาที่สอน]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [10. อาจารย์ผู้สอนไม่มีการพัฒนาความรู้ให้เป็นปัจจุบันในวิชาที่สอน]',]].replace(regex=scale)

            labels = ['อาจารย์มีการใช้สื่อการเรียนการสอนที่ไม่น่าสนใจ',
                    'อาจารย์ไม่มีความสามารถในการทําให้ผู้เรียนเข้าใจเนื้อหาได้ง่าย',
                    'บรรยากาศในห้องเรียนไม่น่าสนุกสนาน',
                    'อาจารย์ใช้เกณฑ์การตัดเกรดที่ไม่เหมาะสม',
                    'อาจารย์ให้ความสนใจนักศึกษาไม่เพียงพอ',
                    'อาจารย์ไม่รับฟังความคิดเห็นของนักศึกษา',
                    'อาจารย์ไม่มีความตั้งใจในการสอน',
                    'อาจารย์ผู้สอนมีการประเมินคะแนนที่ไม่ยุติธรรม',
                    'อาจารย์ผู้สอนมีประสบการณ์และความรู้ไม่เพียงพอในวิชาที่สอน',
                    'อาจารย์ผู้สอนไม่มีการพัฒนาความรู้ให้เป็นปัจจุบันในวิชาที่สอน',]

        else:
            satisfication = filtered_df[filtered_df['คณะ'] == fiel][['ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [1. อาจารย์มีการใช้สื่อการเรียนการสอนที่น่าสนใจ]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [2. อาจารย์มีความสามารถในการทําให้ผู้เรียนเข้าใจเนื้อหาได้ง่าย]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [3. บรรยากาศในห้องเรียนน่าสนุกสนาน]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [4. อาจารย์ใช้เกณฑ์การตัดเกรดที่เหมาะสม]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [5. อาจารย์ให้ความสนใจนักศึกษามากเพียงพอ]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [6. อาจารย์รับฟังความคิดเห็นของนักศึกษา]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [7. อาจารย์มีความตั้งใจในการสอน]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [8. อาจารย์ผู้สอนมีการประเมินคะแนนที่ยุติธรรม]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [9. อาจารย์ผู้สอนมีประสบการณ์และความรู้เพียงพอในวิชาที่สอน]',
                            'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [10. อาจารย์ผู้สอนมีการพัฒนาความรู้ให้เป็นปัจจุบันในวิชาที่สอนสม่ำเสมอ]' ]].replace(regex=scale)

            labels = ['อาจารย์มีการใช้สื่อการเรียนการสอนที่น่าสนใจ',
                    'อาจารย์มีความสามารถในการทําให้ผู้เรียนเข้าใจเนื้อหาได้ง่าย',
                    'บรรยากาศในห้องเรียนน่าสนุกสนาน',
                    'อาจารย์ใช้เกณฑ์การตัดเกรดที่เหมาะสม',
                    'อาจารย์ให้ความสนใจนักศึกษามากเพียงพอ',
                    'อาจารย์รับฟังความคิดเห็นของนักศึกษา',
                    'อาจารย์มีความตั้งใจในการสอน',
                    'อาจารย์ผู้สอนมีการประเมินคะแนนที่ยุติธรรม',
                    'อาจารย์ผู้สอนมีประสบการณ์และความรู้เพียงพอในวิชาที่สอน',
                    'อาจารย์ผู้สอนมีการพัฒนาความรู้ให้เป็นปัจจุบันในวิชาที่สอนสม่ำเสมอ']
        vals = satisfication.mean()

        fig = go.Figure(go.Bar(
            y=labels,
            x=vals,
            text=vals,
            texttemplate="%{value:.2f}",
            orientation='h',
            marker=dict(color=px.colors.qualitative.Pastel),
        ))

        fig.update_layout(
            title="ปัจจัยด้านอาจารย์ผู้สอน",
            xaxis_title="จำนวนนักศึกษา",
            yaxis_title="ประเด็นของปัจจัยด้านอาจารย์ผู้สอน",
            yaxis={'categoryorder': 'total ascending'},
            xaxis_range=[1, 5],
            xaxis=dict(
                tickmode="array",
                tickvals=np.arange(len(vals)) + 1,
                ticktext=["1 น้อยที่สุด", "2 น้อย", "3 ปานกลาง", "4 มาก", "5 มากที่สุด"]
            ),
            height=500,
            width=700,
        )

        st.plotly_chart(fig,use_container_width=True)
        if have == 'เคย':
            satisfication = filtered_df[filtered_df['คณะ'] == fiel][['ด้านที่ 3 ปัจจัยด้านสถานศึกษา [1. เนื้อหาสาระที่กําหนดในหลักสูตรไม่เหมาะสม]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [2. อุปกรณ์การเรียนการสอนในห้องเรียนไม่เพียงพอ]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [3. อุปกรณ์การเรียนการสอนในห้องเรียนไม่ทันสมัย]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [4. ห้องปฏิบัติการ(ห้องLab)มีอุปกรณ์เครื่องมือที่ไม่มีประสิทธิภาพ ทำให้ไม่สามารถเกิดความรู้และความเข้าใจได้]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [5. ขนาดของห้องเรียนไม่เอื้ออํานวยต่อการการเรียน]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [6. สภาพห้องเรียนเป็นอุปสรรคต่อการสร้างสมาธิให้เกิดต่อการเรียน]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [7. บริเวณรอบสถานศึกษามีสิ่งเร้าทําให้ไม่อยากเข้าเรียน]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [8. ในแต่ละคณะมีกิจกรรมที่ไม่เหมาะสมทําให้นักศึกษามีเวลาน้อยในการทบทวนบทเรียนให้ครบถ้วน]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [9. การจัดตารางสอบไม่เหมาะสมต่อความยากง่ายและจํานวนของวิชา]',]].replace(regex=scale)

            labels = ['เนื้อหาสาระที่กําหนดในหลักสูตรไม่เหมาะสม',
                    'อุปกรณ์การเรียนการสอนในห้องเรียนไม่เพียงพอ',
                    'อุปกรณ์การเรียนการสอนในห้องเรียนไม่ทันสมัย',
                    'ห้องปฏิบัติการ(ห้องLab)มีอุปกรณ์เครื่องมือที่ไม่มีประสิทธิภาพ ทำให้ไม่สามารถเกิดความรู้และความเข้าใจได้',
                    'ขนาดของห้องเรียนไม่เอื้ออํานวยต่อการการเรียน',
                    'สภาพห้องเรียนเป็นอุปสรรคต่อการสร้างสมาธิให้เกิดต่อการเรียน',
                    'บริเวณรอบสถานศึกษามีสิ่งเร้าทําให้ไม่อยากเข้าเรียน',
                    'ในแต่ละคณะมีกิจกรรมที่ไม่เหมาะสมทําให้นักศึกษามีเวลาน้อยในการทบทวนบทเรียนให้ครบถ้วน',
                    'การจัดตารางสอบไม่เหมาะสมต่อความยากง่ายและจํานวนของวิชา',]
        else:
            satisfication = filtered_df[filtered_df['คณะ'] == fiel][['ด้านที่ 3 ปัจจัยด้านสถานศึกษา [1. เนื้อหาสาระที่กําหนดในหลักสูตรเหมาะสม]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [2. อุปกรณ์การเรียนการสอนในห้องเรียนเพียงพอ]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [3. อุปกรณ์การเรียนการสอนในห้องเรียนทันสมัย]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [4. ห้องปฏิบัติการ(ห้องLab)มีอุปกรณ์เครื่องมือที่ดีและมี ประสิทธิภาพมากพอให้เกิดความรู้และความเข้าใจ]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [5. ขนาดของห้องเรียนเอื้ออํานวยต่อการการเรียน]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [6. สภาพห้องเรียนไม่เป็นอุปสรรคต่อการสร้างสมาธิให้เกิดต่อ การเรียน]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [7. บริเวณรอบสถานศึกษาไม่มีสิ่งเร้าทําให้ไม่อยากเข้าเรียน]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [8. ในแต่ละคณะมีกิจกรรมที่เหมาะสมทําให้นักศึกษามีเวลามากพอในการทบทวนบทเรียนให้ครบถ้วน]',
                            'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [9. การจัดตารางสอบเหมาะสมต่อความยากง่ายและจํานวนของวิชา]' ]].replace(regex=scale)


            labels = ['เนื้อหาสาระที่กําหนดในหลักสูตรเหมาะสม',
                    'อุปกรณ์การเรียนการสอนในห้องเรียนเพียงพอ',
                    'อุปกรณ์การเรียนการสอนในห้องเรียนทันสมัย',
                    'ห้องปฏิบัติการ(ห้องLab)มีอุปกรณ์เครื่องมือที่ดีและมี ประสิทธิภาพมากพอให้เกิดความรู้และความเข้าใจ',
                    'ขนาดของห้องเรียนเอื้ออํานวยต่อการการเรียน',
                    'สภาพห้องเรียนไม่เป็นอุปสรรคต่อการสร้างสมาธิให้เกิดต่อ การเรียน',
                    'บริเวณรอบสถานศึกษาไม่มีสิ่งเร้าทําให้ไม่อยากเข้าเรียน',
                    'ในแต่ละคณะมีกิจกรรมที่เหมาะสมทําให้นักศึกษามีเวลามากพอในการทบทวนบทเรียนให้ครบถ้วน',
                    'การจัดตารางสอบเหมาะสมต่อความยากง่ายและ จํานวนของวิชา']
            
        
        vals = satisfication.mean()

        fig = go.Figure(go.Bar(
            y=labels,
            x=vals,
            text=vals,
            texttemplate="%{value:.2f}",
            orientation='h',
            marker=dict(color=px.colors.qualitative.Pastel),
        ))

        fig.update_layout(
            title="ปัจจัยด้านสถานศึกษา",
            xaxis_title="จำนวนนักศึกษา",
            yaxis_title="ประเด็นของปัจจัยด้านสถานศึกษา",
            yaxis={'categoryorder': 'total ascending','tickfont':dict(size=10)},
            xaxis_range=[1, 5],
            xaxis=dict(
                tickmode="array",
                tickvals=np.arange(len(vals)) + 1,
                ticktext=["1 น้อยที่สุด", "2 น้อย", "3 ปานกลาง", "4 มาก", "5 มากที่สุด"]
            ),
            height=500,
            width=1000,
        )
        fig.update_yaxes()
        st.plotly_chart(fig,use_container_width=True)

        col1,col2 = st.columns([1,1])
        try:
            if have == 'เคย':
                temp = [['อันดับที่ 1','อันดับที่ 2','อันดับที่ 3'],
                        ['อันดับที่ 1.1','อันดับที่ 2.1','อันดับที่ 3.1']]
            else:
                temp = [['อันดับที่ 1.2','อันดับที่ 2.2','อันดับที่ 3.2'],
                        ['อันดับที่ 1.3','อันดับที่ 2.3','อันดับที่ 3.3']]
            
            with col1:
                    st.subheader('วิชาที่พึงพอใจ')
                    
                    wordcloud1 = WordCloud(width = 800, height = 800,
                        background_color ='white',
                        stopwords = None,
                        min_font_size = 10,
                        colormap='viridis').generate(' '.join(filtered_df[(filtered_df['คณะ'] == fiel) & (filtered_df[temp[0][0]].str.contains(r'^[A-Za-z]{2}\d{3}$'))][temp[0][0]]))

                    wordcloud2 = WordCloud(width = 800, height = 800,
                                    background_color ='white',
                                    stopwords = None,
                                    min_font_size = 10,
                                    colormap='viridis').generate(' '.join(filtered_df[(filtered_df['คณะ'] == fiel) & (filtered_df[temp[0][1]].str.contains(r'^[A-Za-z]{2}\d{3}$'))][temp[0][1]]))

                    wordcloud3 = WordCloud(width = 800, height = 800,
                                    background_color ='white',
                                    stopwords = None,
                                    min_font_size = 10,
                                    colormap='viridis').generate(' '.join(filtered_df[(filtered_df['คณะ'] == fiel) & (filtered_df[temp[0][2]].str.contains(r'^[A-Za-z]{2}\d{3}$'))][temp[0][2]]))
                    
                    
                    subcol1,subcol2,subcol3 = st.columns([1,1,1])
                    with subcol1:
                        st.text('อันดับ 1')
                        st.image(wordcloud1.to_array(),use_column_width=True)
                    with subcol2:
                        st.text('อันดับ 2')
                        st.image(wordcloud2.to_array(),use_column_width=True)
                    with subcol3:
                        st.text('อันดับ 3')
                        st.image(wordcloud3.to_array(),use_column_width=True)
                        
            with col2:
                st.subheader('วิชาที่ไม่พึงพอใจ')
                
                wordcloud1 = WordCloud(width = 800, height = 800,
                    background_color ='white',
                    stopwords = None,
                    min_font_size = 10,
                    colormap='viridis').generate(' '.join(filtered_df[(filtered_df['คณะ'] == fiel) & (filtered_df[temp[1][0]].str.contains(r'^[A-Za-z]{2}\d{3}$'))][temp[1][0]]))

                wordcloud2 = WordCloud(width = 800, height = 800,
                                background_color ='white',
                                stopwords = None,
                                min_font_size = 10,
                                colormap='viridis').generate(' '.join(filtered_df[(filtered_df['คณะ'] == fiel) & (filtered_df[temp[1][1]].str.contains(r'^[A-Za-z]{2}\d{3}$'))][temp[1][1]]))

                wordcloud3 = WordCloud(width = 800, height = 800,
                                background_color ='white',
                                stopwords = None,
                                min_font_size = 10,
                                colormap='viridis').generate(' '.join(filtered_df[(filtered_df['คณะ'] == fiel) & (filtered_df[temp[1][2]].str.contains(r'^[A-Za-z]{2}\d{3}$'))][temp[1][2]]))
                
                
                subcol1,subcol2,subcol3 = st.columns([1,1,1])
                with subcol1:
                    st.text('อันดับ 1')
                    st.image(wordcloud1.to_array(),use_column_width=True)
                with subcol2:
                    st.text('อันดับ 2')
                    st.image(wordcloud2.to_array(),use_column_width=True)
                with subcol3:
                    st.text('อันดับ 3')
                    st.image(wordcloud3.to_array(),use_column_width=True)
        except Exception:
            print("Something Error!!")
else:
    scale = {'น้อยที่สุด': 1, 'น้อย': 2, 'ปลานกลาง': 3, 'มาก': 4, 'มากที่สุด': 5}

    if have == 'เคย':
        satisfication = df3[['ด้านที่ 1 ปัจจัยด้านการศึกษา [1. นักศึกษาไม่มีความกระตือรือร้นในการเรียน]',
                                'ด้านที่ 1 ปัจจัยด้านการศึกษา [2. นักศึกษาส่งการบ้านไม่ครบและไม่ตรงตามกำหนดเวลา]',
                                'ด้านที่ 1 ปัจจัยด้านการศึกษา [3. นักศึกษามีคะแนนสอบที่ไม่น่าพอใจ]',
                                'ด้านที่ 1 ปัจจัยด้านการศึกษา [4. นักศึกษาไม่ได้เข้าเรียนเป็นประจำ]',
                                'ด้านที่ 1 ปัจจัยด้านการศึกษา [5. นักศึกษาไม่ทบทวนบทเรียนสม่ำเสมอ]',
                                'ด้านที่ 1 ปัจจัยด้านการศึกษา [6. นักศึกษาทำกิจกรรมของมหาวิทยาลัยเป็นประจำ]',
                                'ด้านที่ 1 ปัจจัยด้านการศึกษา [7. นักศึกษามีส่วนร่วมในชั้นเรียนน้อย]',
                                'ด้านที่ 1 ปัจจัยด้านการศึกษา [8. ครอบครัวมีผลต่อผลการเรียนของนักศึกษา]' ]].replace(regex=scale)
        labels = ['นักศึกษาไม่มีความกระตือรือร้นในการเรียน',
                'นักศึกษาส่งการบ้านไม่ครบและไม่ตรงตามกำหนดเวลา',
                'นักศึกษามีคะแนนสอบที่ไม่น่าพอใจ',
                'นักศึกษาไม่ได้เข้าเรียนเป็นประจำ',
                'นักศึกษาไม่ทบทวนบทเรียนสม่ำเสมอ',
                'นักศึกษาทำกิจกรรมของมหาวิทยาลัยเป็นประจำ',
                'นักศึกษามีการมีส่วนร่วมในชั้นเรียนน้อย',
                'ครอบครัวมีผลต่อผลการเรียนของนักศึกษา']
    
    else:
        satisfication = df3[['ด้านที่ 1 ปัจจัยด้านการศึกษา [1. นักศึกษามีความกระตือรือร้นในการเรียน]',
                    'ด้านที่ 1 ปัจจัยด้านการศึกษา [2. นักศึกษาส่งการบ้านครบและตรงตามกำหนดเวลา]',
                    'ด้านที่ 1 ปัจจัยด้านการศึกษา [3. นักศึกษามีคะแนนสอบที่น่าพอใจ]',
                    'ด้านที่ 1 ปัจจัยด้านการศึกษา [4. นักศึกษาเข้าเรียนเป็นประจำ]',
                    'ด้านที่ 1 ปัจจัยด้านการศึกษา [5. นักศึกษาทบทวนบทเรียนสม่ำเสมอ]',
                    'ด้านที่ 1 ปัจจัยด้านการศึกษา [6. นักศึกษาทำกิจกรรมของมหาวิทยาลัยเป็นประจำ].1',
                    'ด้านที่ 1 ปัจจัยด้านการศึกษา [7. นักศึกษามีส่วนร่วมในชั้นเรียนเป็นประจำ]',
                    'ด้านที่ 1 ปัจจัยด้านการศึกษา [8. ครอบครัวมีผลต่อผลการเรียนของนักศึกษา].1' ]].replace(regex=scale)

        labels = ['นักศึกษามีความกระตือรือร้นในการเรียน',
                'นักศึกษาส่งการบ้านครบและตรงตามกำหนดเวลา',
                'นักศึกษามีคะแนนสอบที่น่าพอใจ',
                'นักศึกษาเข้าเรียนเป็นประจำ',
                'นักศึกษาทบทวนบทเรียนสม่ำเสมอ',
                'นักศึกษาทำกิจกรรมของมหาวิทยาลัยเป็นประจำ',
                'นักศึกษามีส่วนร่วมในชั้นเรียน',
                'ครอบครัวมีผลต่อผลการเรียนของนักศึกษา']

    vals = satisfication.mean()

    fig = go.Figure(go.Bar(
        y=labels,
        x=vals,
        text=vals,
        texttemplate="%{value:.2f}",
        orientation='h',
        marker=dict(color=px.colors.qualitative.Pastel),
    ))

    fig.update_layout(
        title="ปัจจัยด้านนักศึกษา",
        xaxis_title="จำนวนนักศึกษา",
        yaxis_title="ประเด็นของปัจจัยด้านการศึกษา",
        yaxis={'categoryorder': 'total ascending'},
        xaxis_range=[1, 5],
        xaxis=dict(
            tickmode="array",
            tickvals=np.arange(len(vals)) + 1,
            ticktext=["1 น้อยที่สุด", "2 น้อย", "3 ปานกลาง", "4 มาก", "5 มากที่สุด"]
        ),
        height=500,
        width=700,
    )

    st.plotly_chart(fig,use_container_width=True)

    if have == 'เคย':
        satisfication = df3[['ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [1. อาจารย์มีการใช้สื่อการเรียนการสอนที่ไม่น่าสนใจ]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [2. อาจารย์ไม่มีความสามารถในการทําให้ผู้เรียนเข้าใจเนื้อหาได้ง่าย]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [3. บรรยากาศในห้องเรียนไม่น่าสนุกสนาน]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [4. อาจารย์ใช้เกณฑ์การตัดเกรดที่ไม่เหมาะสม]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [5. อาจารย์ให้ความสนใจนักศึกษาไม่เพียงพอ]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [6. อาจารย์ไม่รับฟังความคิดเห็นของนักศึกษา]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [7. อาจารย์ไม่มีความตั้งใจในการสอน]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [8. อาจารย์ผู้สอนมีการประเมินคะแนนที่ไม่ยุติธรรม]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [9. อาจารย์ผู้สอนมีประสบการณ์และความรู้ไม่เพียงพอในวิชาที่สอน]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [10. อาจารย์ผู้สอนไม่มีการพัฒนาความรู้ให้เป็นปัจจุบันในวิชาที่สอน]',]].replace(regex=scale)

        labels = ['อาจารย์มีการใช้สื่อการเรียนการสอนที่ไม่น่าสนใจ',
                'อาจารย์ไม่มีความสามารถในการทําให้ผู้เรียนเข้าใจเนื้อหาได้ง่าย',
                'บรรยากาศในห้องเรียนไม่น่าสนุกสนาน',
                'อาจารย์ใช้เกณฑ์การตัดเกรดที่ไม่เหมาะสม',
                'อาจารย์ให้ความสนใจนักศึกษาไม่เพียงพอ',
                'อาจารย์ไม่รับฟังความคิดเห็นของนักศึกษา',
                'อาจารย์ไม่มีความตั้งใจในการสอน',
                'อาจารย์ผู้สอนมีการประเมินคะแนนที่ไม่ยุติธรรม',
                'อาจารย์ผู้สอนมีประสบการณ์และความรู้ไม่เพียงพอในวิชาที่สอน',
                'อาจารย์ผู้สอนไม่มีการพัฒนาความรู้ให้เป็นปัจจุบันในวิชาที่สอน',]

    else:
        satisfication = df3[['ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [1. อาจารย์มีการใช้สื่อการเรียนการสอนที่น่าสนใจ]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [2. อาจารย์มีความสามารถในการทําให้ผู้เรียนเข้าใจเนื้อหาได้ง่าย]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [3. บรรยากาศในห้องเรียนน่าสนุกสนาน]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [4. อาจารย์ใช้เกณฑ์การตัดเกรดที่เหมาะสม]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [5. อาจารย์ให้ความสนใจนักศึกษามากเพียงพอ]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [6. อาจารย์รับฟังความคิดเห็นของนักศึกษา]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [7. อาจารย์มีความตั้งใจในการสอน]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [8. อาจารย์ผู้สอนมีการประเมินคะแนนที่ยุติธรรม]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [9. อาจารย์ผู้สอนมีประสบการณ์และความรู้เพียงพอในวิชาที่สอน]',
                        'ด้านที่ 2 ปัจจัยด้านอาจารย์ผู้สอน [10. อาจารย์ผู้สอนมีการพัฒนาความรู้ให้เป็นปัจจุบันในวิชาที่สอนสม่ำเสมอ]' ]].replace(regex=scale)

        labels = ['อาจารย์มีการใช้สื่อการเรียนการสอนที่น่าสนใจ',
                'อาจารย์มีความสามารถในการทําให้ผู้เรียนเข้าใจเนื้อหาได้ง่าย',
                'บรรยากาศในห้องเรียนน่าสนุกสนาน',
                'อาจารย์ใช้เกณฑ์การตัดเกรดที่เหมาะสม',
                'อาจารย์ให้ความสนใจนักศึกษามากเพียงพอ',
                'อาจารย์รับฟังความคิดเห็นของนักศึกษา',
                'อาจารย์มีความตั้งใจในการสอน',
                'อาจารย์ผู้สอนมีการประเมินคะแนนที่ยุติธรรม',
                'อาจารย์ผู้สอนมีประสบการณ์และความรู้เพียงพอในวิชาที่สอน',
                'อาจารย์ผู้สอนมีการพัฒนาความรู้ให้เป็นปัจจุบันในวิชาที่สอนสม่ำเสมอ']
    vals = satisfication.mean()

    fig = go.Figure(go.Bar(
        y=labels,
        x=vals,
        text=vals,
        texttemplate="%{value:.2f}",
        orientation='h',
        marker=dict(color=px.colors.qualitative.Pastel),
    ))

    fig.update_layout(
        title="ปัจจัยด้านอาจารย์ผู้สอน",
        xaxis_title="จำนวนนักศึกษา",
        yaxis_title="ประเด็นของปัจจัยด้านอาจารย์ผู้สอน",
        yaxis={'categoryorder': 'total ascending'},
        xaxis_range=[1, 5],
        xaxis=dict(
            tickmode="array",
            tickvals=np.arange(len(vals)) + 1,
            ticktext=["1 น้อยที่สุด", "2 น้อย", "3 ปานกลาง", "4 มาก", "5 มากที่สุด"]
        ),
        height=500,
        width=700,
    )

    st.plotly_chart(fig,use_container_width=True)
    if have == 'เคย':
        satisfication = df3[['ด้านที่ 3 ปัจจัยด้านสถานศึกษา [1. เนื้อหาสาระที่กําหนดในหลักสูตรไม่เหมาะสม]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [2. อุปกรณ์การเรียนการสอนในห้องเรียนไม่เพียงพอ]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [3. อุปกรณ์การเรียนการสอนในห้องเรียนไม่ทันสมัย]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [4. ห้องปฏิบัติการ(ห้องLab)มีอุปกรณ์เครื่องมือที่ไม่มีประสิทธิภาพ ทำให้ไม่สามารถเกิดความรู้และความเข้าใจได้]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [5. ขนาดของห้องเรียนไม่เอื้ออํานวยต่อการการเรียน]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [6. สภาพห้องเรียนเป็นอุปสรรคต่อการสร้างสมาธิให้เกิดต่อการเรียน]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [7. บริเวณรอบสถานศึกษามีสิ่งเร้าทําให้ไม่อยากเข้าเรียน]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [8. ในแต่ละคณะมีกิจกรรมที่ไม่เหมาะสมทําให้นักศึกษามีเวลาน้อยในการทบทวนบทเรียนให้ครบถ้วน]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [9. การจัดตารางสอบไม่เหมาะสมต่อความยากง่ายและจํานวนของวิชา]',]].replace(regex=scale)

        labels = ['เนื้อหาสาระที่กําหนดในหลักสูตรไม่เหมาะสม',
                'อุปกรณ์การเรียนการสอนในห้องเรียนไม่เพียงพอ',
                'อุปกรณ์การเรียนการสอนในห้องเรียนไม่ทันสมัย',
                'ห้องปฏิบัติการ(ห้องLab)มีอุปกรณ์เครื่องมือที่ไม่มีประสิทธิภาพ ทำให้ไม่สามารถเกิดความรู้และความเข้าใจได้',
                'ขนาดของห้องเรียนไม่เอื้ออํานวยต่อการการเรียน',
                'สภาพห้องเรียนเป็นอุปสรรคต่อการสร้างสมาธิให้เกิดต่อการเรียน',
                'บริเวณรอบสถานศึกษามีสิ่งเร้าทําให้ไม่อยากเข้าเรียน',
                'ในแต่ละคณะมีกิจกรรมที่ไม่เหมาะสมทําให้นักศึกษามีเวลาน้อยในการทบทวนบทเรียนให้ครบถ้วน',
                'การจัดตารางสอบไม่เหมาะสมต่อความยากง่ายและจํานวนของวิชา',]
    else:
        satisfication = df3[['ด้านที่ 3 ปัจจัยด้านสถานศึกษา [1. เนื้อหาสาระที่กําหนดในหลักสูตรเหมาะสม]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [2. อุปกรณ์การเรียนการสอนในห้องเรียนเพียงพอ]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [3. อุปกรณ์การเรียนการสอนในห้องเรียนทันสมัย]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [4. ห้องปฏิบัติการ(ห้องLab)มีอุปกรณ์เครื่องมือที่ดีและมี ประสิทธิภาพมากพอให้เกิดความรู้และความเข้าใจ]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [5. ขนาดของห้องเรียนเอื้ออํานวยต่อการการเรียน]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [6. สภาพห้องเรียนไม่เป็นอุปสรรคต่อการสร้างสมาธิให้เกิดต่อ การเรียน]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [7. บริเวณรอบสถานศึกษาไม่มีสิ่งเร้าทําให้ไม่อยากเข้าเรียน]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [8. ในแต่ละคณะมีกิจกรรมที่เหมาะสมทําให้นักศึกษามีเวลามากพอในการทบทวนบทเรียนให้ครบถ้วน]',
                        'ด้านที่ 3 ปัจจัยด้านสถานศึกษา [9. การจัดตารางสอบเหมาะสมต่อความยากง่ายและจํานวนของวิชา]' ]].replace(regex=scale)


        labels = ['เนื้อหาสาระที่กําหนดในหลักสูตรเหมาะสม',
                'อุปกรณ์การเรียนการสอนในห้องเรียนเพียงพอ',
                'อุปกรณ์การเรียนการสอนในห้องเรียนทันสมัย',
                'ห้องปฏิบัติการ(ห้องLab)มีอุปกรณ์เครื่องมือที่ดีและมี ประสิทธิภาพมากพอให้เกิดความรู้และความเข้าใจ',
                'ขนาดของห้องเรียนเอื้ออํานวยต่อการการเรียน',
                'สภาพห้องเรียนไม่เป็นอุปสรรคต่อการสร้างสมาธิให้เกิดต่อ การเรียน',
                'บริเวณรอบสถานศึกษาไม่มีสิ่งเร้าทําให้ไม่อยากเข้าเรียน',
                'ในแต่ละคณะมีกิจกรรมที่เหมาะสมทําให้นักศึกษามีเวลามากพอในการทบทวนบทเรียนให้ครบถ้วน',
                'การจัดตารางสอบเหมาะสมต่อความยากง่ายและ จํานวนของวิชา']
        
    
    vals = satisfication.mean()

    fig = go.Figure(go.Bar(
        y=labels,
        x=vals,
        text=vals,
        texttemplate="%{value:.2f}",
        orientation='h',
        marker=dict(color=px.colors.qualitative.Pastel),
    ))

    fig.update_layout(
        title="ปัจจัยด้านสถานศึกษา",
        xaxis_title="จำนวนนักศึกษา",
        yaxis_title="ประเด็นของปัจจัยด้านสถานศึกษา",
        yaxis={'categoryorder': 'total ascending','tickfont':dict(size=10)},
        xaxis_range=[1, 5],
        xaxis=dict(
            tickmode="array",
            tickvals=np.arange(len(vals)) + 1,
            ticktext=["1 น้อยที่สุด", "2 น้อย", "3 ปานกลาง", "4 มาก", "5 มากที่สุด"]
        ),
        height=500,
        width=1000,
    )
    fig.update_yaxes()
    st.plotly_chart(fig,use_container_width=True)

    col1,col2 = st.columns([1,1])
    try:
        if have == 'เคย':
            temp = [['อันดับที่ 1','อันดับที่ 2','อันดับที่ 3'],
                    ['อันดับที่ 1.1','อันดับที่ 2.1','อันดับที่ 3.1']]
        else:
            temp = [['อันดับที่ 1.2','อันดับที่ 2.2','อันดับที่ 3.2'],
                    ['อันดับที่ 1.3','อันดับที่ 2.3','อันดับที่ 3.3']]
        
        with col1:
                st.subheader('วิชาที่พึงพอใจ')
                
                wordcloud1 = WordCloud(width = 800, height = 800,
                    background_color ='white',
                    stopwords = None,
                    min_font_size = 10,
                    colormap='viridis').generate(' '.join(df3[(df3[temp[0][0]].str.contains(r'^[A-Za-z]{2}\d{3}$'))][temp[0][0]]))

                wordcloud2 = WordCloud(width = 800, height = 800,
                                background_color ='white',
                                stopwords = None,
                                min_font_size = 10,
                                colormap='viridis').generate(' '.join(df3[(df3[temp[0][1]].str.contains(r'^[A-Za-z]{2}\d{3}$'))][temp[0][1]]))

                wordcloud3 = WordCloud(width = 800, height = 800,
                                background_color ='white',
                                stopwords = None,
                                min_font_size = 10,
                                colormap='viridis').generate(' '.join(df3[(df3[temp[0][2]].str.contains(r'^[A-Za-z]{2}\d{3}$'))][temp[0][2]]))
                
                
                subcol1,subcol2,subcol3 = st.columns([1,1,1])
                with subcol1:
                    st.text('อันดับ 1')
                    st.image(wordcloud1.to_array(),use_column_width=True)
                with subcol2:
                    st.text('อันดับ 2')
                    st.image(wordcloud2.to_array(),use_column_width=True)
                with subcol3:
                    st.text('อันดับ 3')
                    st.image(wordcloud3.to_array(),use_column_width=True)
                    
        with col2:
            st.subheader('วิชาที่ไม่พึงพอใจ')
            
            wordcloud1 = WordCloud(width = 800, height = 800,
                background_color ='white',
                stopwords = None,
                min_font_size = 10,
                colormap='viridis').generate(' '.join(df3[(df3[temp[1][0]].str.contains(r'^[A-Za-z]{2}\d{3}$'))][temp[1][0]]))

            wordcloud2 = WordCloud(width = 800, height = 800,
                            background_color ='white',
                            stopwords = None,
                            min_font_size = 10,
                            colormap='viridis').generate(' '.join(df3[(df3[temp[1][1]].str.contains(r'^[A-Za-z]{2}\d{3}$'))][temp[1][1]]))

            wordcloud3 = WordCloud(width = 800, height = 800,
                            background_color ='white',
                            stopwords = None,
                            min_font_size = 10,
                            colormap='viridis').generate(' '.join(df3[(df3[temp[1][2]].str.contains(r'^[A-Za-z]{2}\d{3}$'))][temp[1][2]]))
            
            
            subcol1,subcol2,subcol3 = st.columns([1,1,1])
            with subcol1:
                st.text('อันดับ 1')
                st.image(wordcloud1.to_array(),use_column_width=True)
            with subcol2:
                st.text('อันดับ 2')
                st.image(wordcloud2.to_array(),use_column_width=True)
            with subcol3:
                st.text('อันดับ 3')
                st.image(wordcloud3.to_array(),use_column_width=True)
    except Exception:
        print("Something Error!!")